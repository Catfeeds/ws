package com.cplatform.mall.back.order.web;
import java.net.SocketException;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;


import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cplatform.dbhelp.page.Page;
import com.cplatform.mall.back.order.entity.CodeInfo;
import com.cplatform.mall.back.order.entity.ExpressStrack;
import com.cplatform.mall.back.order.entity.ExpressStrackData;
import com.cplatform.mall.back.order.entity.Order;
import com.cplatform.mall.back.order.entity.OrderPage;
import com.cplatform.mall.back.order.entity.Pagination;
import com.cplatform.mall.back.order.entity.RequestUtils;
import com.cplatform.mall.back.order.service.CodeInfoService;
import com.cplatform.mall.back.order.service.OrderService;
import com.cplatform.mall.back.smsbuy.entity.SmsBuyActOnline;
import com.cplatform.mall.back.smsbuy.service.SmsBuyActOnlineService;
import com.cplatform.mall.back.store.entity.Store;
import com.cplatform.mall.back.store.entity.StoreFee;
import com.cplatform.mall.back.utils.AppConfig;
import com.cplatform.mall.back.utils.JsonRespWrapper;
import com.cplatform.mall.back.utils.LogUtils;
import com.cplatform.order.ActOrderGoodsInfo;
import com.cplatform.order.ActOrderHistory;
import com.cplatform.order.ActOrderInfo;
import com.cplatform.order.ActOrderPaymentInfo;
import com.cplatform.order.ActOrderService;
import com.cplatform.order.PaymentSpliteGoodsInfo;
import com.cplatform.order.PaymentSpliteOrderInfo;

/**
 * 订单控制类 Title. <br>
 * Description.
 * <p>
 * Copyright: Copyright (c) 2013-6-8 下午8:02:52
 * <p>
 * Company: 北京宽连十方数字技术有限公司
 * <p>
 * Author: LiuDong@c-platform.com
 * <p>
 * Version: 1.0
 * <p>
 */
@Controller
@RequestMapping(value = "/order")
public class OrderController {
	private static Logger log = Logger.getLogger(OrderController.class);
	@Autowired
	private LogUtils logUtils;

    private SmsBuyActOnlineService  actOnlineService;
	
	@Autowired
	private OrderService orderService;

	@Autowired
	private CodeInfoService codeInfoService;

	@Autowired
	ActOrderService actOrderService;

	@Autowired
	private AppConfig appConfig;

	@RequestMapping(value = "/list")
	public String findOrderList(
			OrderPage order,
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			Model model) throws SQLException {
		Page<OrderPage> pageData = this.orderService.findOrderList(order, page,
				Page.DEFAULT_PAGESIZE);
		// Page<Order> pageData = this.orderService.findPageList(order, page,
		// Page.DEFAULT_PAGESIZE);
		model.addAttribute("pageData", pageData);
		return "/order/order-list";
	}

	@RequestMapping(value = "/view")
	public String orderView(@RequestParam(value = "id") Long id, Model model)
			throws Exception {
		ActOrderInfo order = orderService.getActOrderInfoById(id);
		List<ActOrderHistory> actOrderHistorys = actOrderService
				.getActOrderHistory(id);
		// 遍历商品信息，根据商品id获取商品类型map，用于前台控制显示该商品属于实物商品还是虚拟商品。
		if (order != null && order.getGoodsInfos() != null
				&& order.getGoodsInfos().size() > 0) {
			String ids = "";
			for (int i = 0; i < order.getGoodsInfos().size(); i++) {
				ids += order.getGoodsInfos().get(i).getGoodsId() + ",";
			}
			if (ids.length() > 0) {
				ids = ids.substring(0, ids.length() - 1);
			}
			Map<String, String> saleModeMap = this.orderService
					.getSaleMode(ids);
			model.addAttribute("saleModeMap", saleModeMap);
		}
		// 订单用户信息、商户信息map
		Map<String, String> userMap = orderService.getUserByOrderId(id);
		model.addAttribute("userMap", userMap);
		// 订单物流公司map
		Map<String, String> expressMap = orderService.getExpressByOrderId(id);
		model.addAttribute("expressMap", expressMap);
		/* 添加空指针判断 @add_by macl@c-platform.com */
		if (null == order) {
			return "/order/order-view";
		}

		// 配送方式和商品类型map
		Map<String, String> itemMap = orderService.getOrderDeliveryMode(id);
		model.addAttribute("itemMap", itemMap);

		// 获取虚拟商品码
		if (null != itemMap) {
			CodeInfo codeInfo = new CodeInfo();
			codeInfo.setActOrderId(order.getId());
			List<ActOrderGoodsInfo> goodInfos = order.getGoodsInfos();
			if (null != goodInfos && goodInfos.size() > 0) {
				codeInfo.setItemOrderId(goodInfos.get(goodInfos.size() - 1)
						.getId());
				model.addAttribute("goodInfo",
						goodInfos.get(goodInfos.size() - 1));
			}
			List<CodeInfo> codes = codeInfoService.listStoreCodes(codeInfo);
			model.addAttribute("codes", codes);

		}

		// 支付信息和结算信息
		orderService.getPayMsg(order, model);

		model.addAttribute("order", order);
		model.addAttribute("actOrderHistorys", actOrderHistorys);
//		logUtils.logView("查看订单", "订单id:"+id);
		return "/order/order-view";

	}

	/**
	 * 订单物流追踪查看
	 * 
	 * @param model
	 * @return
	 * @throws SQLException
	 * @throws IOException
	 * @throws Exception
	 */
	@RequestMapping(value = "/showExpress")
	public String showExpress(Model model, HttpServletRequest request,
			HttpServletResponse response, Integer pageIndex, Long orderId)
			throws SQLException {
		Pagination pagination = new Pagination();
		Map<String, String> expressMap = orderService
				.getExpressByOrderId(orderId);
		String com = expressMap.get("ename");
		String nu = null;
		if (StringUtils.isNotEmpty(expressMap.get("expressNo"))) {
			nu = expressMap.get("expressNo");
		}
		// 获取物流信息json对象
		String jsonString = null;
		try {
			jsonString = orderService.getExpressJsonString(com, nu);
		} catch (SocketException e) {
			logUtils.logAdd("调用快递100接口超时", e.getMessage());
			log.error("调用快递100接口超时:" + e.getMessage());
		} catch (Exception e) {
			log.error("调用快递100接口失败:" + e.getMessage());
		}
		log.info(jsonString);
		List<ExpressStrackData> datas = null;
		List<ExpressStrackData> clist = null;
		if (pageIndex == null) {
			pageIndex = 1;
		}
		Integer s1 = (pageIndex - 1) * pagination.getPageSize();
		Integer s2 = pageIndex * pagination.getPageSize();
		// 解析json
		if (StringUtils.isNotEmpty(jsonString)) {
			JSONArray jarr = JSONArray.fromObject("[" + jsonString + "]");
			List<ExpressStrack> listobject = (List<ExpressStrack>) JSONArray
					.toCollection(jarr, ExpressStrack.class);
			if (null != listobject && listobject.size() > 0) {
				datas = listobject.get(0).getData();
				if (null != datas && datas.size() > 0) {
					if (s2 >= datas.size()) {
						s2 = datas.size();
					}
					clist = datas.subList(s1, s2);
					// 设置分页对象属性
					String url = RequestUtils.assembleOneUri(request,
							"pageIndex");
					pagination.setUrl(url);
					pagination.setPageIndex(pageIndex);
					pagination.setTotalRecordCnt(datas.size());
					if (pageIndex < 1) {
						pageIndex = 1;
					} else if (pageIndex > pagination.getTotalPageCnt()) {
						pageIndex = pagination.getTotalPageCnt();
					}
					pagination.setDataList(clist);
				}
			}
		}
		model.addAttribute("pagination", pagination);
		model.addAttribute("orderId", orderId);
		return "order/order-express";
	}

	/**
	 * 补发验证码
	 * 
	 * @param id
	 * @param model
	 * @return
	 * @throws SQLException
	 */
	@RequestMapping(value = "/reissued")
	@ResponseBody
	public Object reissued(@RequestParam(value = "id") Long id, Model model)
			throws SQLException {
		// OrderGoods goods =
		// this.orderService.findOrderGoodsByOrderId(orderId)(id);

		// 调用接口判断是否已经发送过

		// 调用补发接口
		String msg = orderService.reissued(id);
		return JsonRespWrapper.successAlert(msg);
	}

	/**
	 * 重发验证码
	 * 
	 * @param id
	 *            码编号
	 * @param model
	 * @return
	 * @throws SQLException
	 */
	@RequestMapping(value = "/resend")
	@ResponseBody
	public Object resend(String id, Model model) throws SQLException {
		// 调用重发接口
		String msg = orderService.resend(id);
		return JsonRespWrapper.successAlert(msg);
	}

	/**
	 * 统计订单列表页面
	 * 
	 * @param storeId
	 * @param model
	 * @return
	 * @throws SQLException
	 */
	@RequestMapping(value = "/statisticaOrderList/{extInfo}/{payStatus}")
	public Object statisticaOrderList(
			Order order,
			@PathVariable Long extInfo,
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			Model model) throws SQLException {
		order.setExtInfo(extInfo.toString());
		Page<Order> orderlist = this.orderService.statisticalOrderByActId(order, page, Page.DEFAULT_PAGESIZE);
		model.addAttribute("pageData", orderlist);
		model.addAttribute("PayStatusMap",Order.getPayStatusMap());
		model.addAttribute("syncGyFlagMsg", Store.syncGyFlagMsg);
		return "/order/statisticalOrder-list";
	}
	
	 
	@RequestMapping(value = "/statistView")
	public String statistView(@RequestParam(value = "id") Long id, Model model)
			throws Exception {
		Order order = orderService.findStiOrderById(id);
	List<PaymentSpliteGoodsInfo> ItmeInfos	= orderService.praseSpliteInfo(order.getSpliteInfo());
		model.addAttribute("order", order);
		model.addAttribute("ItmeInfos", ItmeInfos);
		model.addAttribute("payStatusMap", Order.getPayStatusMap());
		return "/order/statisticalOrder-view";
		
	}
}
