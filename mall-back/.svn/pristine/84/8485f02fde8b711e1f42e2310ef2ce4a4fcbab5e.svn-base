package com.cplatform.mall.back.giftcard.service;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.cplatform.dbhelp.DbHelper;
import com.cplatform.dbhelp.page.Page;
import com.cplatform.mall.back.giftcard.dao.GiftCardDao;
import com.cplatform.mall.back.giftcard.dao.GiftRequiredDao;
import com.cplatform.mall.back.giftcard.entity.GiftCard;
import com.cplatform.mall.back.giftcard.entity.GiftRequired;
import com.cplatform.mall.back.utils.ExcelExportUtil;
import com.cplatform.mall.back.utils.PathUtil.PathInfo;
import com.cplatform.mall.back.utils.data.RoleDataUtils;
import com.cplatform.mall.back.websys.dao.SysFileImgDao;
import com.cplatform.mall.back.websys.entity.SysFileImg;
import com.cplatform.mall.back.websys.service.BsFileService;
import com.cplatform.util2.TimeStamp;
/**
 * 
 * 礼品卡需求业务方法
 * 
 * */

@Service
public class GiftRequiredService {
	@Autowired
	private DbHelper dbHelper;
	
	@Autowired
	private GiftRequiredDao giftRequiredDao;
	
	@Autowired
	private GiftCardDao giftCardDao;
	
	@Autowired
	private BsFileService bsFileService;
	
	@Autowired
	private SysFileImgDao sysFileImgDao;
	
	
	public Page<GiftRequired> giftRequiredList(GiftRequired giftRequired, int pageNo, int pageSize) throws SQLException{
		StringBuilder sql = new StringBuilder();
		List<Object> params = new ArrayList<Object>();
		sql.setLength(0);
		sql.append(" select giftRequired.* from t_gift_required giftRequired ");
		sql.append(" where 1 = 1 ");
		if (null != giftRequired.getStatus()) {
			sql.append(" and giftRequired.status = ? ");
			params.add(giftRequired.getStatus());
		}else{
			sql.append(" and giftRequired.status <> -1 ");
		}
		if(null != giftRequired.getBatchNo()){
			sql.append(" and giftRequired.batch_no = ? ");
			params.add(giftRequired.getBatchNo());
		}
		if (StringUtils.isNotEmpty(giftRequired.getModelNo())) {
			sql.append(" and giftRequired.model_no like ? ");
			params.add("%" + giftRequired.getModelNo().trim() + "%");
		}
		if (StringUtils.isNotEmpty(giftRequired.getRequiredUser())) {
			sql.append(" and giftRequired.required_user like ? ");
			params.add("%" + giftRequired.getRequiredUser().trim() + "%");
		}
		if(null != giftRequired.getCardNum()){
			sql.append(" and giftRequired.card_num = ? ");
			params.add(giftRequired.getCardNum());
		}
		if (StringUtils.isNotEmpty(giftRequired.getBeginTime())) {
			sql.append(" and giftRequired.issuing_time > ?  ");
			params.add(giftRequired.getBeginTime()+"000000");
		}
		if (StringUtils.isNotEmpty(giftRequired.getEndTime())) {
			sql.append(" and giftRequired.issuing_time < ?  ");
			params.add(giftRequired.getEndTime()+"000000");
		}
		if (null != giftRequired.getMakeCardStatus()) {
			sql.append(" and giftRequired.make_card_status = ? ");
			params.add(giftRequired.getMakeCardStatus());
		}
		if (null != giftRequired.getPrintFaceStatus()) {
			sql.append(" and giftRequired.print_face_status = ? ");
			params.add(giftRequired.getPrintFaceStatus());
		}
		if (null != giftRequired.getBindItemStatus()) {
			sql.append(" and giftRequired.bind_item_status = ? ");
			params.add(giftRequired.getBindItemStatus());
		}
		sql.append(RoleDataUtils.getRoleData(RoleDataUtils.MODUE_GIFT_REQUIRED));// 控制数据访问
		sql.append(" order by giftRequired.batch_no desc");
		Page<GiftRequired> pageData = dbHelper.getPage(sql.toString(), GiftRequired.class, pageNo, pageSize, params.toArray());
		return pageData;
	}
	
	public void save(GiftRequired giftRequired){
		giftRequiredDao.save(giftRequired);
	}
	public GiftRequired findById(Long id){
		return giftRequiredDao.findOne(id);
	}
	@Transactional
	public String makeCard(Long id){
		String msg = "制卡成功";
		//高阳接口
		if("制卡成功".equals(msg)){
			saveGiftCard("GY" + id,id);
			GiftRequired giftRequired = findById(id);
			giftRequired.setMakeCardStatus(1L);
			save(giftRequired);
		}
		return msg;
	}
	private void saveGiftCard(String serialNo,Long id){
		GiftCard giftCard = new GiftCard();
		giftCard.setSerialNo(serialNo);
		giftCard.setBatchNo(id);
		giftCard.setCreatedTime(TimeStamp.getTime(TimeStamp.YYYYMMDDhhmmss));
		giftCard.setExchangeStatus(0L);
		giftCard.setStatus(0L);
		giftCard.setStorageStatus(0L);
		giftCardDao.save(giftCard);
	}
	public void download(Long id,HttpServletRequest request,HttpServletResponse response) throws Exception{
		StringBuilder sqlBuff = new StringBuilder();
		sqlBuff.setLength(0);
		sqlBuff.append("select t.batch_no,t.serial_no from t_gift_card t where t.batch_no = "+id);
		String[] head = {"批次号","序列号"};
		ExcelExportUtil.exportExcel(dbHelper.getConn(),head,"serialNo_", sqlBuff.toString(),request,response);
	}
	
	
	public Page<GiftRequired> exchangeList(GiftRequired giftRequired, int pageNo, int pageSize) throws SQLException{
		StringBuilder sql = new StringBuilder();
		List<Object> params = new ArrayList<Object>();
		sql.setLength(0);
		sql.append(" select t.exchangeNum,giftRequired.* from t_gift_required giftRequired ");
		sql.append(" left join ");
		sql.append(" (select count(handle.id) exchangeNum,re.batch_no from t_gift_required re  ");
		sql.append(" left join t_gift_card card on re.batch_no=card.batch_no ");
		sql.append(" left join t_gift_card_cb_handle handle on card.serial_no=handle.serial_no ");
		sql.append(" group by re.batch_no) t ");
		sql.append(" on giftRequired.batch_no=t.batch_no ");
		sql.append(" where giftRequired.status=2 ");
		if(null != giftRequired.getBatchNo()){
			sql.append(" and giftRequired.batch_no = ? ");
			params.add(giftRequired.getBatchNo());
		}
		if (StringUtils.isNotEmpty(giftRequired.getModelNo())) {
			sql.append(" and giftRequired.model_no like ? ");
			params.add("%" + giftRequired.getModelNo().trim() + "%");
		}
		if (StringUtils.isNotEmpty(giftRequired.getRequiredUser())) {
			sql.append(" and giftRequired.required_user like ? ");
			params.add("%" + giftRequired.getRequiredUser().trim() + "%");
		}
		if(null != giftRequired.getCardNum()){
			sql.append(" and giftRequired.card_num = ? ");
			params.add(giftRequired.getCardNum());
		}
		if (StringUtils.isNotEmpty(giftRequired.getBeginTime())) {
			sql.append(" and giftRequired.issuing_time > ?  ");
			params.add(giftRequired.getBeginTime()+"000000");
		}
		if (StringUtils.isNotEmpty(giftRequired.getEndTime())) {
			sql.append(" and giftRequired.issuing_time < ?  ");
			params.add(giftRequired.getEndTime()+"000000");
		}
		if (null != giftRequired.getMakeCardStatus()) {
			sql.append(" and giftRequired.make_card_status = ? ");
			params.add(giftRequired.getMakeCardStatus());
		}
		if (null != giftRequired.getPrintFaceStatus()) {
			sql.append(" and giftRequired.print_face_status = ? ");
			params.add(giftRequired.getPrintFaceStatus());
		}
		if (null != giftRequired.getBindItemStatus()) {
			sql.append(" and giftRequired.bind_item_status = ? ");
			params.add(giftRequired.getBindItemStatus());
		}
		sql.append(" order by giftRequired.batch_no desc");
		Page<GiftRequired> pageData = dbHelper.getPage(sql.toString(), GiftRequired.class, pageNo, pageSize, params.toArray());
		return pageData;
	}
	public void savePic(Long id ,MultipartFile uploadFile) throws Exception{
		SysFileImg img = findImg(id, BsFileService.GIFT_REQUIRED_KEY);
		if(null != img){
			sysFileImgDao.delete(img);
		}
		PathInfo pathInfo = bsFileService.dealMultipartFile(uploadFile, BsFileService.GIFT_REQUIRED_KEY, id);
		GiftRequired giftRequired = findById(id);
		giftRequired.setFaceImg(pathInfo.getRealWebPath(""));
		save(giftRequired);
	}
	public SysFileImg findImg(Long id ,String key){
		return  sysFileImgDao.findByBsIdAndBsKey(id, key);
	} 

}
