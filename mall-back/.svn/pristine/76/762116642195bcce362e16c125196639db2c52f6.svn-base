package com.cplatform.mall.back.websys.web;

import java.sql.SQLException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cplatform.dbhelp.page.Page;
import com.cplatform.mall.back.store.entity.ShopPosLink;
import com.cplatform.mall.back.store.service.ShopService;
import com.cplatform.mall.back.utils.JsonRespWrapper;
import com.cplatform.mall.back.utils.LogUtils;
import com.cplatform.mall.back.websys.dao.SysPosDao;
import com.cplatform.mall.back.websys.entity.SysPos;
import com.cplatform.mall.back.websys.service.SysPosService;

/**
 * 终端管理控制器. <br>
 * 类详细说明.
 * <p>
 * Copyright: Copyright (c) 2013-5-25 下午02:59:26
 * <p>
 * Company: 北京宽连十方数字技术有限公司
 * <p>
 * 
 * @author zhaowei@c-platform.com
 * @version 1.0.0
 */
@Controller
@RequestMapping(value = "/websys/pos")
public class SysPosController {

	@Autowired
	private LogUtils logUtils;

	@Autowired
	private SysPosDao sysPosDao;

	@Autowired
	private SysPosService sysPosService;
	
	@Autowired
	private ShopService shopService;

	/**
	 * 终端管理查询
	 * @param param    查询条件
	 * @param page    当前页
	 * @param model
	 * @return
	 * @throws SQLException
	 */
	@RequestMapping(value = "/query")
	public String list(SysPos param, @RequestParam(value = "page", required = false, defaultValue = "1") int page, Model model) throws SQLException {
		Page<SysPos> posPage = sysPosService.findSysPos(param, page);
		model.addAttribute("param", param);
		model.addAttribute("sysPos", posPage);
		model.addAttribute("typeMap", SysPos.getTypeMap());
		return "websys/pos/pos_list";
	}

	/**
	 * 跳转终端添加
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/add", method = RequestMethod.GET)
	public String add(Model model) {
		SysPos sysPos = new SysPos();
		model.addAttribute("method", "add");
		model.addAttribute("sysPos", sysPos);
		model.addAttribute("typeMap", SysPos.getTypeMap());
		return "websys/pos/pos_add";
	}
	/**
	 * 终端添加
	 * @param sysPos    终端实体类
	 * @param request
	 * @param result
	 * @return
	 */
	@RequestMapping(value = "/add", method = RequestMethod.POST)
	@ResponseBody
	public Object createPost(@ModelAttribute("sysPos") SysPos sysPos, HttpServletRequest request, BindingResult result) {
		List<SysPos> posList = sysPosDao.findByName(sysPos.getName());
		if(posList.size() > 0){
			return JsonRespWrapper.successAlert("终端名称已存在，请重新输入！");
		}
		try {
			// 执行业务逻辑
			sysPos = sysPosDao.save(sysPos);

			// 提示并跳转
			return JsonRespWrapper.success("添加成功", "/websys/pos/query");

		}
		catch (Exception ex) {
			// 未知的错误消息，一般是exception catch后通知用户
			return JsonRespWrapper.error(ex.getMessage());
		}
	}
	
	/**
	 * 跳转终端编辑
	 * @param id    待编辑终端
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/edit", method = RequestMethod.GET)
	public String edit(@RequestParam(required = false) Long id, Model model) {
		SysPos sp = sysPosDao.findOne(id);
		model.addAttribute("method", "edit");
		model.addAttribute("sysPos", sp);
		model.addAttribute("typeMap", SysPos.getTypeMap());
		return "websys/pos/pos_add";
	}

	/**
	 * 终端编辑
	 * @param sysPos    终端实体类
	 * @param request
	 * @param result
	 * @return
	 */
	@RequestMapping(value = "/edit", method = RequestMethod.POST)
	@ResponseBody
	public Object updatePost(@ModelAttribute("sysPos") SysPos sysPos, HttpServletRequest request, BindingResult result) {
		String oldName = request.getParameter("oldName");
		List<SysPos> posList = sysPosDao.findByName(sysPos.getName());
		if(!oldName.equals(sysPos.getName()) && posList.size() > 0){
			return JsonRespWrapper.successAlert("终端名称已存在，请重新输入！");
			
		}
		try {
			// 执行业务逻辑
			sysPos = sysPosDao.save(sysPos);

			// 提示并跳转
			return JsonRespWrapper.success("修改成功", "/websys/pos/query");

		}
		catch (Exception ex) {
			// 未知的错误消息，一般是exception catch后通知用户
			return JsonRespWrapper.error(ex.getMessage());
		}
	}

	/**
	 * 删除终端
	 * @param id    待删除终端
	 * @return
	 */
	@RequestMapping(value = "delete/{id}")
	@ResponseBody
	public Object deletePos(@PathVariable Long id) {
		//TODO:校验是否在t_shop_pos_link存在与门店关联的终端
		//若存在，则提示存在于门店关联的终端，不能被删除，并返回
		//否则可删除
	    List<ShopPosLink> shopPosLinkList = shopService.findShopPosLinkListByPosId(id);
	    if(0 < shopPosLinkList.size()){
	    	return JsonRespWrapper.successAlert("删除失败！该终端已与门店关联");
	    }
		sysPosDao.delete(id);
		return JsonRespWrapper.successReload("删除成功");
	}
}
