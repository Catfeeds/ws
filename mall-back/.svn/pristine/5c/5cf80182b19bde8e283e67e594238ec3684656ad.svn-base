package com.cplatform.mall.back.web;

import com.cplatform.mall.back.model.SessionUser;
import com.cplatform.mall.back.service.MenuService;
import com.cplatform.mall.back.sys.dao.SysUnitDao;
import com.cplatform.mall.back.sys.dao.UserDao;
import com.cplatform.mall.back.sys.entity.SysUser;
import com.cplatform.mall.back.utils.AppConfig;
import org.jasig.cas.client.authentication.AttributePrincipalImpl;
import org.jasig.cas.client.util.AbstractCasFilter;
import org.jasig.cas.client.validation.Assertion;
import org.jasig.cas.client.validation.AssertionImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.request.WebRequest;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.util.HashMap;
import java.util.Map;

@Controller
@RequestMapping("/")
public class MainController {

	@Autowired
	UserDao userDao;

	@Autowired
	SysUnitDao sysUnitDao;

	@Autowired
	MenuService menuService;

    @Autowired
    AppConfig appConfig;

	@RequestMapping(value="", method = RequestMethod.GET)
	public String home(Model model, HttpSession session) {
        // 模拟登录开启
        if (appConfig.isFackLogin()) {
            // 判断本地是否登录。
            if (session.getAttribute(SessionUser.SESSION_USER_KEY) == null)
                return "menu/fack-login-form";
        }
        return "redirect:/menu";

	}

    @RequestMapping(value="", method = RequestMethod.POST)
    public String fakeLogin(String username, HttpSession session) {

        if (appConfig.isFackLogin()) {
            fackLogin(session, username);
        }

        return "redirect:/menu";
    }


	@RequestMapping(value = "info/{status}")
	public String info(@PathVariable String status, Model model) {
		model.addAttribute("status", status);
		return "info";
	}

	@RequestMapping("user/role")
	@ResponseBody
	public String role() {
		return "ok";
	}


	@RequestMapping("logout")
	public String logout(HttpServletRequest request) {
		// invalidate session local and sso server also send sso logout request;
		request.getSession().invalidate();

        // 登出跳转需使用sso 服务器的链接。带service参数表示登出后跳转地址。
		return "redirect:" + appConfig.getSsoServer() + "/logout?service=" + appConfig.getSsoClient() + request.getContextPath();
	}

	/*
	 * 用于js脚本的全局变量
	 */
	@RequestMapping(value = "/static/global.js", produces = { "application/x-javascript", "text/javascript", "application/javascript" })
	@ResponseBody
	public String jsGlobal(WebRequest webRequest) {
		StringBuilder sb = new StringBuilder();
		sb.append("var G_CTX_ROOT = '").append(webRequest.getContextPath()).append("';\n");
        sb.append("var XH_EXT = '").append(appConfig.getXheditorExt()).append("';\n");
        sb.append("var XH_IMG_EXT = '").append(appConfig.getXheditorImageExt()).append("';\n");
        sb.append("var XH_MAXSIZE = '").append(appConfig.getXheditorMaxSize()).append("';\n");
        sb.append("var XH_DOMAIN = '").append(appConfig.getXheditorDomain()).append("';\n");

		return sb.toString();
	}


    private void fackLogin(HttpSession session, String uid) {
        final String principal = uid;

        if (uid == null) {
            throw new RuntimeException("user code  is null!");
        }

        SysUser user = userDao.findByUserCode(uid);

        if (user == null) {
            throw new RuntimeException("user name not found!");
        }
        Map<String, Object> attributes = new HashMap<String, Object>();
        attributes.put("ID", user.getId());
        attributes.put("FLAG", user.getFlag());
        attributes.put("UNIT_ID", user.getUnitId());
        attributes.put("EMAIL", user.getEmail());
        attributes.put("USER_NAME", user.getUserName());
        attributes.put("USER_CODE", user.getUserCode());
        attributes.put("STATUS", user.getStatus());
        attributes.put("CHANGE_PWD_TIME", user.getChangePwdTime());
        attributes.put("TERMINAL_ID", user.getTerminalId());
        attributes.put("VALID_TIME", user.getValidTime());

        Assertion assertion = new AssertionImpl(new AttributePrincipalImpl(principal, attributes));

        session.setAttribute(AbstractCasFilter.CONST_CAS_ASSERTION, assertion);
    }


}
