package com.cplatform.mall.back.lottery.service;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cplatform.dbhelp.DbHelper;
import com.cplatform.dbhelp.page.Page;
import com.cplatform.mall.back.lottery.dao.LoggerDao;
import com.cplatform.mall.back.lottery.entity.Logger;
import com.cplatform.mall.back.utils.data.RoleDataUtils;

@Service
public class LoggerService {

	@Autowired
	private DbHelper dbHelper;
	@Autowired
	private LoggerDao loggerDao;

	public void save(Logger logger) {
		loggerDao.save(logger);
	}

	public Page<Logger> findLoggerList(Logger logger, int pageNo, int pageSize)
			throws SQLException {
		StringBuilder sqlBuff = new StringBuilder();
		List<Object> params = new ArrayList<Object>();
		sqlBuff.setLength(0);
		sqlBuff.append("select t.id id, ");
		sqlBuff.append("t1.hit_level hitLevel, ");
		sqlBuff.append("t.target_id targetId, ");
		sqlBuff.append("t.content content, ");
		sqlBuff.append("t.hit_time hitTime ");
		sqlBuff.append("from t_lottery_log t ");
		sqlBuff.append("join t_lottery_prize t1 ");
		sqlBuff.append("on t.prize_id = t1.id ");
		// sqlBuff.append("join t_lottery_target t2 ");
		// sqlBuff.append("on t.target_id = t2.id ");
		sqlBuff.append("where 1=1 ");
		if (null != logger.getId()) {
			sqlBuff.append(" and t.id = ? ");
			params.add(logger.getId());
		}
		if (StringUtils.isNotEmpty(logger.getBeginTime())) {
			sqlBuff.append(" and t.hit_time > ?  ");
			params.add(logger.getBeginTime()+"000000");
		}
		if (StringUtils.isNotEmpty(logger.getEndTime())) {
			sqlBuff.append(" and t.hit_time < ?  ");
			params.add(logger.getEndTime()+"000000");
		}
		sqlBuff.append(RoleDataUtils.getRoleData(RoleDataUtils.MODULE_LOTTERY));
		sqlBuff.append("order by t.hit_time desc ");
		Page<Logger> pageData = dbHelper.getPage(sqlBuff.toString(),
				Logger.class, pageNo, pageSize, params.toArray());
		return pageData;
	}

	/**
	 * 导出方法
	 * */
	public void exportExcel(String[] head, String sql,HttpServletRequest request,HttpServletResponse response) {
		Connection conn = null;
		WritableWorkbook book = null;
		BufferedInputStream bis = null;
		BufferedOutputStream bos = null;
		Date date = new Date();
		SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss");
		String time = format.format(date);
		String dir = request.getSession().getServletContext().getRealPath("") +File.separator;
		String fileName ="lotteryLog_"+ time + ".xls";
		File file = new File(dir,fileName);
		try {
			conn = dbHelper.getConn();
			PreparedStatement preStmt = conn.prepareStatement(sql);
			ResultSet rs = preStmt.executeQuery();
			book = Workbook.createWorkbook(file);
			WritableSheet sheet = book.createSheet("第一页", 0);
			for (int i = 0; i < head.length; i++) {
				Label label = new Label(i, 0, head[i]);
				sheet.addCell(label);
			}
			int j = 1;
			while (rs.next()) {
				for (int i = 0; i < head.length; i++) {
					Label label = new Label(i, j, rs.getString(i + 1));
					sheet.addCell(label);
				}
				j++;
			}
			book.write();
			book.close();
		       response.setContentType("text/plain; charset=utf-8");  
		        response.setHeader("Content-disposition", "attachment; filename="  
		                + new String(fileName.getBytes("utf-8"), "ISO8859-1"));  
			bis = new BufferedInputStream(new FileInputStream(dir+fileName));
			bos = new BufferedOutputStream(response.getOutputStream());
			byte[] buff = new byte[1024];
			int bytesRead;
			while (-1 != (bytesRead = bis.read(buff, 0, buff.length))) {
				bos.write(buff, 0, bytesRead);
			}
		} catch (Exception e) {
			e.printStackTrace();

		} finally {
			try {
				conn.close();
				bis.close();
				bos.close();
				if (file.exists()) {
					file.delete();
				}
			} catch (Exception e) {
				e.printStackTrace();

			}
		}
	}
	public void download(HttpServletRequest request,HttpServletResponse response){
		StringBuilder sqlBuff = new StringBuilder();
		sqlBuff.setLength(0);
		sqlBuff.append("select t.id id, ");
		sqlBuff.append("t1.hit_level hitLevel, ");
		sqlBuff.append("t.target_id targetId, ");
		sqlBuff.append("t.content content, ");
		sqlBuff.append("t.hit_time hitTime ");
		sqlBuff.append("from t_lottery_log t ");
		sqlBuff.append("join t_lottery_prize t1 ");
		sqlBuff.append("on t.prize_id = t1.id ");
		String[] head = {"编号","奖品等级","中奖手机号","中奖内容","中奖时间"};
		exportExcel(head, sqlBuff.toString(),request,response);
	}
}
