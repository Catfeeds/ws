package com.cplatform.mall.back.order.web;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cplatform.dbhelp.page.Page;
import com.cplatform.mall.back.item.entity.StoreCode;
import com.cplatform.mall.back.order.entity.OrderExpress;
import com.cplatform.mall.back.order.entity.OrderGoods;
import com.cplatform.mall.back.order.entity.OrderPage;
import com.cplatform.mall.back.order.entity.OrderPayment;
import com.cplatform.mall.back.order.service.OrderService;
import com.cplatform.mall.back.utils.JsonRespWrapper;
import com.cplatform.mall.back.utils.LogUtils;
import com.cplatform.order.ActOrderGoodsInfo;
import com.cplatform.order.ActOrderHistory;
import com.cplatform.order.ActOrderInfo;
import com.cplatform.order.ActOrderPaymentInfo;
import com.cplatform.order.ActOrderService;

/**
 * 订单控制类 Title. <br>
 * Description.
 * <p>
 * Copyright: Copyright (c) 2013-6-8 下午8:02:52
 * <p>
 * Company: 北京宽连十方数字技术有限公司
 * <p>
 * Author: LiuDong@c-platform.com
 * <p>
 * Version: 1.0
 * <p>
 */
@Controller
@RequestMapping(value = "/order")
public class OrderController {

	@Autowired
	private LogUtils logUtils;

	@Autowired
	private OrderService orderService;

	@Autowired
	ActOrderService actOrderService;

	@RequestMapping(value = "/list")
	public String findOrderList(OrderPage order, @RequestParam(value = "page", required = false, defaultValue = "1") int page, Model model)
	        throws SQLException {
		Page<OrderPage> pageData = this.orderService.findOrderList(order, page, Page.DEFAULT_PAGESIZE);
		// Page<Order> pageData = this.orderService.findPageList(order, page,
		// Page.DEFAULT_PAGESIZE);
		model.addAttribute("pageData", pageData);
		return "/order/order-list";
	}

	@RequestMapping(value = "/view")
	public String orderView(@RequestParam(value = "id") Long id, Model model) throws Exception {
		ActOrderInfo order = orderService.getActOrderInfoById(id);
		List<ActOrderHistory> actOrderHistorys = actOrderService.getActOrderHistory(id);
		// 遍历商品信息，根据商品id获取商品类型map，用于前台控制显示该商品属于实物商品还是虚拟商品。
		if (order != null && order.getGoodsInfos() != null && order.getGoodsInfos().size() > 0) {
			String ids = "";
			for (int i = 0; i < order.getGoodsInfos().size(); i++) {
				ids += order.getGoodsInfos().get(i).getGoodsId() + ",";
			}
			if (ids.length() > 0) {
				ids = ids.substring(0, ids.length() - 1);
			}
			Map<String, String> saleModeMap = this.orderService.getSaleMode(ids);
			model.addAttribute("saleModeMap", saleModeMap);
		}
		//订单用户信息、商户信息map
		Map<String,String> userMap=orderService.getUserByOrderId(id);
		model.addAttribute("userMap", userMap);
		/*添加空指针判断 @add_by macl@c-platform.com*/
		if(null ==order){
			return "/order/order-view";
		}
		
		// 配送方式和商品类型map
		Map<String,String> itemMap=orderService.getOrderDeliveryMode(id);
		model.addAttribute("itemMap", itemMap);
		
		//获取虚拟商品码
		if(null!=itemMap){
			StoreCode storeCode=new StoreCode();
			storeCode.setOrderId(order.getId()+"");
			storeCode.setStoreId(order.getShopId()+"");
			storeCode.setItemId(itemMap.get("itemId"));
			List<StoreCode> storeCodes=orderService.getStoreCodes(storeCode);
			model.addAttribute("storeCodes", storeCodes);
			List<ActOrderGoodsInfo> goodInfos=order.getGoodsInfos();
			if(null!=goodInfos && goodInfos.size()>0){
				model.addAttribute("goodInfo", goodInfos.get(0));
			}
		}
		
		
		// 支付信息和结算信息
		orderService.getPayMsg(order, model);
		
		model.addAttribute("order", order);
		model.addAttribute("actOrderHistorys", actOrderHistorys);
		return "/order/order-view";

	}

	/**
	 * 补发验证码
	 * 
	 * @param id
	 * @param model
	 * @return
	 * @throws SQLException
	 */
	@RequestMapping(value = "/reissued")
	@ResponseBody
	public Object reissued(@RequestParam(value = "id") Long id, Model model) throws SQLException {
		// OrderGoods goods =
		// this.orderService.findOrderGoodsByOrderId(orderId)(id);

		// 调用接口判断是否已经发送过

		// 调用补发接口
		String msg = orderService.reissued(id);
		return JsonRespWrapper.successAlert(msg);
	}

	/**
	 * 重发验证码
	 * 
	 * @param id
	 * @param model
	 * @return
	 * @throws SQLException
	 */
	@RequestMapping(value = "/resend")
	@ResponseBody
	public Object resend(@RequestParam(value = "id") Long id, Model model) throws SQLException {
		// Order order = this.orderService.findOrderById(id);
		// 调用重发接口
		String msg = orderService.resend(id);
		return JsonRespWrapper.successAlert(msg);
	}
}
