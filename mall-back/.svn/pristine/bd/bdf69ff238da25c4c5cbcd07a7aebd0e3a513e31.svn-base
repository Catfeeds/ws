package com.cplatform.mall.back.store.web;

import java.io.IOException;
import java.io.InputStream;
import java.sql.SQLException;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.cplatform.dbhelp.page.Page;
import com.cplatform.mall.back.model.SessionUser;
import com.cplatform.mall.back.model.SyncGYResponseBean;
import com.cplatform.mall.back.store.entity.Store;
import com.cplatform.mall.back.store.entity.StoreFee;
import com.cplatform.mall.back.store.entity.StoreSettle;
import com.cplatform.mall.back.store.service.StoreService;
import com.cplatform.mall.back.store.service.StoreSettleService;
import com.cplatform.mall.back.store.web.validator.StoreSettleValidator;
import com.cplatform.mall.back.utils.AppConfig;
import com.cplatform.mall.back.utils.JsonRespWrapper;
import com.cplatform.mall.back.utils.SyncInterface;
import com.cplatform.mall.back.websys.entity.SysFile;
import com.cplatform.util2.TimeStamp;

/**
 * 结算管理 Title. <br>
 * Description.
 * <p>
 * Copyright: Copyright (c) 2013-7-9 下午7:07:25
 * <p>
 * Company: 北京宽连十方数字技术有限公司
 * <p>
 * Author: LiuDong@c-platform.com
 * <p>
 * Version: 1.0
 * <p>
 */
@Controller
@RequestMapping(value = "/store/storeSettle")
public class StoreSettleController {

	@Autowired
	StoreSettleService storeSettleService;

	@Autowired
	StoreService storeService;

	@Autowired
	private SyncInterface syncInterface;

	@Autowired
	private StoreSettleValidator soreSettleValidator;

	@Autowired
	private AppConfig config;

	/**
	 * 商户信息列表(再用)
	 * 
	 * @param store
	 * @param page
	 * @param model
	 * @return
	 * @throws SQLException
	 */
	@RequestMapping(value = "/auditlist")
	public String auditlist(StoreSettle StoreSettle, @RequestParam(value = "page", required = false, defaultValue = "1") int page, Model model)
	        throws SQLException {
		// store.setShopClass(shopClass);

		Page<StoreSettle> storeSettleList = this.storeSettleService.listStoreSettle(StoreSettle, page, Page.DEFAULT_PAGESIZE);
		model.addAttribute("pageData", storeSettleList);
		model.addAttribute("syncGyFlagMap", StoreSettle.syncGyFlagMap);
		model.addAttribute("statusMap", StoreSettle.statusMap);
		return "/store/settle/settle-audit-list";
	}

	/**
	 * 费率列表页面
	 * 
	 * @param storeId
	 * @param model
	 * @return
	 * @throws SQLException
	 */
	@RequestMapping(value = "/settleList/{storeId}")
	public Object settleList(@PathVariable Long storeId, StoreSettle StoreSettle,
	        @RequestParam(value = "page", required = false, defaultValue = "1") int page, Model model) throws SQLException {
		StoreSettle.setStoreId(storeId);
		Store store = this.storeService.findStoreById(storeId);
		Page<StoreSettle> storeSettleList = this.storeSettleService.listStoreSettle(StoreSettle, page, Page.DEFAULT_PAGESIZE);
		model.addAttribute("store", store);
		model.addAttribute("storeSettleList", storeSettleList);
		return "/store/settle/settle-list";

	}

	/**
	 * 跳转到添加商户结算信息页面
	 * 
	 * @param storeId
	 * @param session
	 * @param model
	 * @return
	 * @throws SQLException
	 */
	@RequestMapping(value = "/settleAdd", method = RequestMethod.GET)
	public Object settleAdd(@RequestParam(value = "storeId") Long storeId, Model model) throws SQLException {

		Store store = this.storeService.findStoreById(storeId);
		model.addAttribute("store", store);
		StoreSettle vo = new StoreSettle();// t
		vo.setStoreId(store.getId());
		vo.setSettlePeriod(0L);
		vo.setSettleDay(1L);
		vo.setSettleDaybit(1L);
		vo.setSettleBeginamt(0L);
		vo.setMinRetainedamt(0L);

		model.addAttribute("storeSettle", vo);
		return "/store/settle/settle-add";

	}

	/**
	 * 保存添加的结算信息
	 * 
	 * @param storeId
	 * @param session
	 * @param model
	 * @return
	 * @throws IOException
	 */
	@RequestMapping(value = "/settleAdd", method = RequestMethod.POST)
	@ResponseBody
	public Object settleSave(MultipartFile uploadfile, StoreSettle po, Model model, BindingResult result) throws IOException {
		soreSettleValidator.validate(po, result);
		if (result.hasErrors()) {
			return JsonRespWrapper.error(result.getFieldErrors());
		}
		InputStream is = null;
		if (uploadfile != null && !uploadfile.isEmpty()) {
			is = uploadfile.getInputStream();
		}

		po.setCreateUser(SessionUser.getSessionUser().getId());
		po.setCreateTime(TimeStamp.getTime(TimeStamp.YYYYMMDDhhmmss));
		po.setSyncGyFlag(0L);
		po.setStatus(0L);
		this.storeService.saveSroreSettle(po, is);

		model.addAttribute("storeSettle", po);

		return JsonRespWrapper.success("操作成功", "/store/storeSettle/settleList/" + po.getStoreId());

	}

	/**
	 * 跳转到修改商户结算信息页面
	 * 
	 * @param storeId
	 * @param session
	 * @param model
	 * @return
	 * @throws SQLException
	 */
	@RequestMapping(value = "/settleEdit", method = RequestMethod.GET)
	public Object settleEdit(@RequestParam(value = "id") Long id, Model model) throws SQLException {

		StoreSettle vo = this.storeService.findStoreSettleById(id);
		if (vo != null) {
			Store store = this.storeService.findStoreById(vo.getStoreId());
			model.addAttribute("store", store);
			SysFile sysFile = this.storeService.getSysFileByStoreId(store.getId());
			model.addAttribute("downurl", sysFile == null ? "" : config.getUploadFilePath() + sysFile.getFileWebPath());
		}
		model.addAttribute("storeSettle", vo);
		return "/store/settle/settle-add";

	}

	/**
	 * 保存修改的结算信息
	 * 
	 * @param storeId
	 * @param session
	 * @param model
	 * @return
	 * @throws IOException
	 */
	@RequestMapping(value = "/settleEdit", method = RequestMethod.POST)
	@ResponseBody
	public Object settleUpdate(MultipartFile uploadfile, StoreSettle po, Model model, BindingResult result) throws IOException {
		soreSettleValidator.validate(po, result);
		if (result.hasErrors()) {
			return JsonRespWrapper.error(result.getFieldErrors());
		}
		InputStream is = null;
		if (uploadfile != null && !uploadfile.isEmpty()) {
			is = uploadfile.getInputStream();
		}
		StoreSettle oldpo = this.storeService.findStoreSettleById(po.getId());
		po.setMerchid(oldpo.getMerchid());
		po.setSyncGyFlag(oldpo.getSyncGyFlag());
		po.setSyncTime(oldpo.getSyncTime());
		po.setStatus(0L);
		po.setCreateUser(oldpo.getCreateUser());
		po.setCreateTime(oldpo.getCreateTime());
		this.storeService.updateSroreSettle(po, is);
		model.addAttribute("storeSettle", po);

		return JsonRespWrapper.success("操作成功", "/store/storeSettle/settleList/" + po.getStoreId());

	}

	@RequestMapping(value = "/settleView/{id}")
	public Object settleView(@PathVariable Long id, HttpSession session, Model model) throws SQLException {
		StoreSettle vo = this.storeService.findStoreSettleById(id);
		if (vo != null) {
			Store store = this.storeService.findStoreById(vo.getStoreId());
			model.addAttribute("store", store);
			SysFile sysFile = this.storeService.getSysFileByStoreId(store.getId());
		
			if (sysFile != null) {
				String downurl = config.getUploadFilePath() + sysFile.getFileWebPath();
				System.out.println(downurl);
				model.addAttribute("downurl", downurl);
			}
		}
		model.addAttribute("storeSettle", vo);
		return "/store/settle/settle-view";

	}

	@RequestMapping(value = "/settleDel/{id}")
	@ResponseBody
	public Object settleDel(@PathVariable Long id, Model model) {
		StoreSettle po = storeService.findStoreSettleById(id);
		if (po.getStatus() == 3L) {
			return JsonRespWrapper.successAlert("当前结算信息已经审核通过，不能被删除");
		}
		if (po.getSyncGyFlag() != null && 0L != po.getSyncGyFlag()) {
			return JsonRespWrapper.successAlert("当前结算信息已经同步过清结算系统，不能被删除");
		}
		storeService.delStoreSettleById(id);
		return JsonRespWrapper.success("操作成功", "/store/storeSettle/settleList/" + po.getStoreId());
	}

	@RequestMapping(value = "/auditPage/{id}")
	public String toAuditPage(@PathVariable Long id, Model model) {
		model.addAttribute("id", id);
		return "/store/settle/settle_audit";
	}

	@RequestMapping(value = "/settleAudit")
	@ResponseBody
	public Object settleAudit(@RequestParam(value = "id") Long id, @RequestParam(value = "status") Long status, Model model) {
		StoreSettle po = this.storeService.findStoreSettleById(id);
		po.setStatus(status);
		this.storeSettleService.auditSettle(po);

		return JsonRespWrapper.success("操作成功", "/store/storeSettle/auditlist");
	}

	@RequestMapping(value = "/sync")
	@ResponseBody
	public Object sync(@RequestParam(value = "ids") String ids, Model model) {
		String msg = "操作完成。";
		SyncGYResponseBean bean = null;
		String[] idarray = ids.split(",");
		if (idarray != null) {
			for (String id : idarray) {
				if ("".equals(id)) {
					continue;
				}
				StoreSettle vo = this.storeService.findStoreSettleById(Long.valueOf(id));
				if (vo != null) {
					Store store = this.storeService.findStoreById(vo.getStoreId());
					if (store == null) {
						continue;
					}
					if (store.getMerchid() == null) {
						msg += vo.getId() + "该商户基本信息未同步成功，暂不能同步。";
						continue;
					}
					// if (store.getSyncGyFlag() != 3L) {
					// msg += vo.getId() + "该商户基本信息清结算平台未审核通过，暂不能同步。";
					// continue;
					// }
					if (vo.getStatus() != 3) {
						msg += vo.getId() + "状态：未审核通过，暂不能同步。";
						continue;
					}
					if (vo.getMerchid() == null) {
						vo.setMerchid(store.getMerchid());
					}
					if (vo.getSyncGyFlag() == 0L) {
						bean = syncInterface.syncAddSettle(vo);
					} else {
						bean = syncInterface.syncUpdateSettle(vo);
					}
					if (bean != null) {
						if (bean.isSyncSuccess()) {
							vo.setSyncGyFlag(1L);
							vo.setMerchid(bean.getMerchid());
							vo.setSyncTime(TimeStamp.getTime(TimeStamp.YYYYMMDDhhmmss));
							this.storeService.addOrUpdataStoreSettle(vo);
						}
						msg += vo.getId() + bean.getMsg();
					} else {
						msg += vo.getId() + "同步失败。";
					}
				}
			}
		}

		return JsonRespWrapper.success(msg, "/store/storeSettle/auditlist");
	}

	@RequestMapping(value = "/syncQuery")
	@ResponseBody
	public Object syncQuery(@RequestParam(value = "ids") String ids, Model model) {
		String msg = "操作完成。";
		SyncGYResponseBean bean = null;
		String[] idarray = ids.split(",");
		if (idarray != null) {
			for (String id : idarray) {
				if ("".equals(id)) {
					continue;
				}
				StoreSettle vo = this.storeService.findStoreSettleById(Long.valueOf(id));
				if (vo != null) {
					if (vo.getMerchid() == null) {
						msg += vo.getId() + "该结算信息未同步成功，暂不能查询。";
						continue;
					}

					if (vo.getStatus() != 3) {
						msg += vo.getId() + "状态：未审核通过，暂不能查询。";
						continue;
					}
					bean = syncInterface.queryStoreSettle(vo);

					if (bean != null) {
						if (bean.isSyncSuccess()) {
							vo.setSyncGyFlag(bean.getSettleInfoStatus());
							vo.setMerchid(bean.getMerchid());
							// vo.setSyncTime(TimeStamp.getTime(TimeStamp.YYYYMMDDhhmmss));
							this.storeService.addOrUpdataStoreSettle(vo);
							msg += vo.getId() + "状态：" + StoreSettle.syncGyFlagMap.get(vo.getSyncGyFlag()) + "。";
							;
						} else {
							msg += vo.getId() + bean.getMsg();
						}
					} else {
						msg += vo.getId() + "查询失败。";
					}
				}
			}
		}

		return JsonRespWrapper.success(msg, "/store/storeSettle/auditlist");
	}
}
